-- Wait until the game is fully loaded
if not game:IsLoaded() then
    game.Loaded:Wait()
end

task.wait(1)

------------------------------------------------
-- KEY SYSTEM WITH BLUR FADE ANIMATION
------------------------------------------------

local correctKey = "changeme" -- << Change to your own key
local allowed = false

-- Services
local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local Lighting = game:GetService("Lighting")
local player = Players.LocalPlayer
local PlayerGui = player:WaitForChild("PlayerGui")

-- Blur background
local blur = Instance.new("BlurEffect")
blur.Size = 0
blur.Parent = Lighting

local blurTweenInfo = TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
local blurTweenIn = TweenService:Create(blur, blurTweenInfo, { Size = 24 })
local blurTweenOut = TweenService:Create(blur, blurTweenInfo, { Size = 0 })

-- GUI setup
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "KeySystemGui"
ScreenGui.ResetOnSpawn = false
ScreenGui.IgnoreGuiInset = true

local Frame = Instance.new("Frame")
Frame.Size = UDim2.new(0, 300, 0, 180)
Frame.Position = UDim2.new(0.5, -150, 0.5, -90)
Frame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
Frame.BorderSizePixel = 0
Frame.BackgroundTransparency = 1
Frame.Parent = ScreenGui

local UICorner = Instance.new("UICorner")
UICorner.CornerRadius = UDim.new(0, 12)
UICorner.Parent = Frame

local Title = Instance.new("TextLabel")
Title.Size = UDim2.new(1, 0, 0, 40)
Title.Position = UDim2.new(0, 0, 0, 0)
Title.BackgroundTransparency = 1
Title.Text = "Key System"
Title.TextSize = 24
Title.Font = Enum.Font.GothamBold
Title.TextColor3 = Color3.fromRGB(255, 255, 255)
Title.TextTransparency = 1
Title.Parent = Frame

local TextBox = Instance.new("TextBox")
TextBox.Size = UDim2.new(0.8, 0, 0, 40)
TextBox.Position = UDim2.new(0.1, 0, 0.4, 0)
TextBox.PlaceholderText = "Enter Key Here"
TextBox.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
TextBox.TextColor3 = Color3.fromRGB(255, 255, 255)
TextBox.Font = Enum.Font.Gotham
TextBox.TextSize = 18
TextBox.ClearTextOnFocus = true
TextBox.BackgroundTransparency = 1
TextBox.TextTransparency = 1
TextBox.Parent = Frame

local TextBoxCorner = Instance.new("UICorner")
TextBoxCorner.CornerRadius = UDim.new(0, 8)
TextBoxCorner.Parent = TextBox

local SubmitButton = Instance.new("TextButton")
SubmitButton.Size = UDim2.new(0.8, 0, 0, 35)
SubmitButton.Position = UDim2.new(0.1, 0, 0.7, 0)
SubmitButton.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
SubmitButton.Text = "Submit"
SubmitButton.TextColor3 = Color3.fromRGB(255, 255, 255)
SubmitButton.Font = Enum.Font.GothamBold
SubmitButton.TextSize = 18
SubmitButton.BackgroundTransparency = 1
SubmitButton.TextTransparency = 1
SubmitButton.Parent = Frame

local SubmitButtonCorner = Instance.new("UICorner")
SubmitButtonCorner.CornerRadius = UDim.new(0, 8)
SubmitButtonCorner.Parent = SubmitButton

ScreenGui.Parent = PlayerGui

-- Animate GUI In
local guiFadeInfo = TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
local fadeInTween = function()
    TweenService:Create(Frame, guiFadeInfo, {BackgroundTransparency = 0}):Play()
    TweenService:Create(Title, guiFadeInfo, {TextTransparency = 0}):Play()
    TweenService:Create(TextBox, guiFadeInfo, {BackgroundTransparency = 0, TextTransparency = 0}):Play()
    TweenService:Create(SubmitButton, guiFadeInfo, {BackgroundTransparency = 0, TextTransparency = 0}):Play()
end

local fadeOutTween = function(callback)
    TweenService:Create(Frame, guiFadeInfo, {BackgroundTransparency = 1}):Play()
    TweenService:Create(Title, guiFadeInfo, {TextTransparency = 1}):Play()
    TweenService:Create(TextBox, guiFadeInfo, {BackgroundTransparency = 1, TextTransparency = 1}):Play()
    TweenService:Create(SubmitButton, guiFadeInfo, {BackgroundTransparency = 1, TextTransparency = 1}):Play()
    task.delay(0.5, callback) -- Wait until fade out finishes
end

blurTweenIn:Play()
fadeInTween()

-- Button behavior
SubmitButton.MouseButton1Click:Connect(function()
    local inputKey = TextBox.Text
    TextBox.Text = "" -- Clear immediately after click
    
    if inputKey == correctKey then
        allowed = true
        fadeOutTween(function()
            ScreenGui:Destroy()
            blurTweenOut:Play()
            task.delay(0.5, function()
                blur:Destroy()
            end)
        end)
    else
        TextBox.PlaceholderText = "Wrong Key! Try Again."
    end
end)

-- Wait until allowed
while not allowed do
    task.wait()
end

------------------------------------------------
-- CONFIGURATION: AIM ASSIST SETTINGS
------------------------------------------------
getgenv().AimAssist = {
    enabled                  = true,
    xSmoothness              = 0.185,
    ySmoothness              = 0.139,
    ySmoothnessDelay         = 0,
    XOffset                  = -27,
    YOffset                  = 0,
    xOffsetSmoothness        = 0.002,
    yOffsetSmoothness        = 0,
    enablePrediction         = true,
    xPrediction              = 0,
    yPrediction              = 0,
    xPredictionSmoothness    = 0,
    yPredictionSmoothness    = 0.12,
    jumpYOffset              = 0.06,
    fallYOffset              = -0.12,
    maxX_FOV                 = 7,
    maxY_FOV                 = 85,
    hoverThreshold           = 35,
    flickDelay               = 0,
    flickDuration            = 0,
    flickOvershoot           = 0,
    postAirTrackEnabled      = true,
    postAirTrackDelay        = 0
}

------------------------------------------------
-- SERVICES & STATE
------------------------------------------------
local Players          = game:GetService("Players")
local RunService       = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local localPlayer      = Players.LocalPlayer
local camera           = workspace.CurrentCamera

-- Linear interpolation helper
local function Lerp(a, b, t)
    return a + (b - a) * t
end

-- Aim state
local holdingAimKey, lockedTarget, targetLockedOnce = false, nil, false
local lastVelY, currentXOffset, currentYOffset = 0, 0, 0
local currentPredOffset = Vector3.new(0,0,0)
local keysDown = { A=false, D=false }
local jumpStartTime, airborne, apexDetected, flickStartTime, flickOriginalLook, flickDesiredDir = nil, false, false, nil, nil, nil
local wasJumping, freefallStartTime = false, nil

------------------------------------------------
-- INPUT HANDLING (no GUI toggle)
------------------------------------------------
UserInputService.InputBegan:Connect(function(input, processed)
    if processed then return end
    if input.KeyCode == Enum.KeyCode.A then
        keysDown.A = true
    elseif input.KeyCode == Enum.KeyCode.D then
        keysDown.D = true
    end
    if input.UserInputType == Enum.UserInputType.MouseButton2 then
        holdingAimKey = true
        targetLockedOnce = false
    end
end)

UserInputService.InputEnded:Connect(function(input)
    if input.KeyCode == Enum.KeyCode.A then
        keysDown.A = false
    elseif input.KeyCode == Enum.KeyCode.D then
        keysDown.D = false
    end
    if input.UserInputType == Enum.UserInputType.MouseButton2 then
        holdingAimKey = false
        lockedTarget = nil
        targetLockedOnce = false
        jumpStartTime = nil
    end
end)

------------------------------------------------
-- HELPER: FIND THE BOT/DUMMY
------------------------------------------------
local function findDummy()
    -- adjust the Name matcher to your dummy’s exact name if needed
    for _, obj in ipairs(workspace:GetDescendants()) do
        if obj:IsA("Model")
        and (obj.Name:match("Bot") or obj.Name:match("Dummy"))
        and obj:FindFirstChild("Head") then
            return obj
        end
    end
    return nil
end

------------------------------------------------
-- MAIN AIM ASSIST LOOP
------------------------------------------------
RunService.RenderStepped:Connect(function()
    local s = getgenv().AimAssist
    if not s.enabled or not holdingAimKey then return end

    -- lock target if not already
    if not lockedTarget and not targetLockedOnce then
        local dummyModel = findDummy()
        if dummyModel then
            lockedTarget = dummyModel
            targetLockedOnce = true
        end
    end

    -- ensure target is still valid
    if not (lockedTarget and lockedTarget:FindFirstChild("Head")) then
        lockedTarget = nil
        return
    end

    -- cache parts & humanoid
    local tC    = lockedTarget
    local head  = tC:FindFirstChild("Head")
    local torso = tC:FindFirstChild("UpperTorso") or tC:FindFirstChild("HumanoidRootPart")
    local root  = tC:FindFirstChild("HumanoidRootPart")
    local hum   = tC:FindFirstChildOfClass("Humanoid")

    -- original dead check
    if not (head and torso and root and hum and hum.Health > 0) then
        lockedTarget = nil
        return
    end

    -- ◀◀◀── KO CHECK: stop aiming at 1 HP ──▶▶▶
    if hum.Health <= 1 then
        lockedTarget = nil
        return
    end

    -- track jump/freefall start
    local state = hum:GetState()
    if state == Enum.HumanoidStateType.Jumping or state == Enum.HumanoidStateType.Freefall then
        if not jumpStartTime then jumpStartTime = tick() end
    else
        jumpStartTime = nil
    end

    -- detect end of jump → freefall
    local isJumping = (state == Enum.HumanoidStateType.Jumping)
    if wasJumping and not isJumping then
        freefallStartTime = tick()
        if not s.postAirTrackEnabled then
            lockedTarget, targetLockedOnce = nil, false
        end
    end
    wasJumping = isJumping

    -- delay tracking in freefall
    if state == Enum.HumanoidStateType.Freefall
       and freefallStartTime
       and tick() - freefallStartTime < s.postAirTrackDelay then
        return
    end

    -- compute target position
    local camPos = camera.CFrame.Position
    local rawPos = head.Position

    -- prediction
    if s.enablePrediction then
        local predY = (state == Enum.HumanoidStateType.Jumping) and 0 or root.Velocity.Y
        local rawPred = Vector3.new(
            root.Velocity.X * s.xPrediction,
            predY * s.yPrediction,
            root.Velocity.Z * s.xPrediction
        )
        currentPredOffset = Vector3.new(
            Lerp(currentPredOffset.X, rawPred.X, s.xPredictionSmoothness),
            Lerp(currentPredOffset.Y, rawPred.Y, s.yPredictionSmoothness),
            Lerp(currentPredOffset.Z, rawPred.Z, s.xPredictionSmoothness)
        )
        rawPos = rawPos + currentPredOffset
    end

    -- jump/fall offsets
    if state == Enum.HumanoidStateType.Jumping then
        rawPos = rawPos + Vector3.new(0, s.jumpYOffset, 0)
    elseif state == Enum.HumanoidStateType.Freefall then
        rawPos = rawPos + Vector3.new(0, s.fallYOffset, 0)
    end

    -- FOV cull
    local sp, vis = camera:WorldToViewportPoint(rawPos)
    local dX = math.abs(sp.X - camera.ViewportSize.X / 2)
    local dY = math.abs(sp.Y - camera.ViewportSize.Y / 2)
    if not (vis
            and dX <= camera.ViewportSize.X * (s.maxX_FOV / 100)
            and dY <= camera.ViewportSize.Y * (s.maxY_FOV / 100)) then
        return
    end

    -- flick logic
    local vy = root.Velocity.Y
    if state == Enum.HumanoidStateType.Jumping or state == Enum.HumanoidStateType.Freefall then
        if not airborne then
            airborne, apexDetected, flickStartTime = true, false, nil
        end
        if not apexDetected and lastVelY > 0 and vy <= 0 then
            apexDetected = true
            flickStartTime = tick()
            flickOriginalLook = camera.CFrame.LookVector
            local dir = (head.Position - camPos).Unit
            flickDesiredDir = (head.Position + dir * s.flickOvershoot - camPos).Unit
        end
        if apexDetected and flickStartTime then
            local elapsed = tick() - flickStartTime
            if elapsed < s.flickDelay then
                lastVelY = vy
                return
            end
            if elapsed < s.flickDelay + s.flickDuration then
                local tVal = math.clamp((elapsed - s.flickDelay) / s.flickDuration, 0, 1)
                local flickDir = flickOriginalLook:Lerp(flickDesiredDir, tVal)
                local curLook = camera.CFrame.LookVector
                local horiz = Vector3.new(flickDir.X, curLook.Y, flickDir.Z).Unit
                camera.CFrame = CFrame.new(camPos, camPos + horiz)
                lastVelY = vy
                return
            else
                airborne, apexDetected, flickStartTime, lastVelY = false, false, nil, vy
            end
        end
    else
        airborne, apexDetected, flickStartTime = false, false, nil
    end
    lastVelY = vy

    -- manual offsets & smoothing (A/D keys)
    local xT = (state == Enum.HumanoidStateType.Freefall) and 0
               or (keysDown.D and s.XOffset or keysDown.A and -s.XOffset or 0)
    currentXOffset = currentXOffset + (xT - currentXOffset) * s.xOffsetSmoothness

    local yT = keysDown.D and s.YOffset or keysDown.A and -s.YOffset or 0
    currentYOffset = currentYOffset + (yT - currentYOffset) * s.yOffsetSmoothness

    rawPos = rawPos
        + localPlayer.Character.HumanoidRootPart.CFrame.RightVector * currentXOffset
        + localPlayer.Character.HumanoidRootPart.CFrame.UpVector    * currentYOffset

    -- Y-smoothing after jump delay
    local dirUnit = (rawPos - camPos).Unit
    local curLook = camera.CFrame.LookVector
    local smoothY = jumpStartTime and (tick() - jumpStartTime >= s.ySmoothnessDelay)
    local tgtDir = smoothY and dirUnit or Vector3.new(dirUnit.X, curLook.Y, dirUnit.Z).Unit

    -- apply final smoothing
    local interp = Vector3.new(
        Lerp(curLook.X, tgtDir.X, s.xSmoothness),
        Lerp(curLook.Y, tgtDir.Y, s.ySmoothness),
        Lerp(curLook.Z, tgtDir.Z, s.xSmoothness)
    ).Unit
    camera.CFrame = CFrame.new(camPos, camPos + interp)
end)
